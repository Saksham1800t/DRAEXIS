const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};


export const GenerateCourseLayout_AI = model.startChat({
    generationConfig,
    history: [
        {
            role: "user",
            parts: [
                { text: "Generate A Course Tutorial on Following detail With field as Course Name, Description, Along with Chapter Name, about, Duration: Category: 'Programming', Topic: Python, level: Basic, Duration: 1 hours, No of Chapters: 5, in JSON format" },
            ],
        },
        {
            role: "model",
            parts: [
                { text: "```json\n{\n  \"CourseName\": \"Python Fundamentals: A Beginner's Guide\",\n  \"Description\": \"This course provides a comprehensive introduction to Python programming. You'll learn the core concepts, syntax, and best practices for writing clean, efficient, and functional Python code. No prior programming experience is required.  This course focuses on practical application and hands-on exercises to solidify your understanding.\",\n  \"Category\": \"Programming\",\n  \"Topic\": \"Python\",\n  \"Level\": \"Basic\",\n  \"Duration\": \"5 hours\",\n  \"NoOfChapters\": 5,\n  \"Chapters\": [\n    {\n      \"ChapterName\": \"Chapter 1: Introduction to Python\",\n      \"About\": \"This chapter introduces you to the world of Python.  We'll cover the history of Python, its uses in various industries, and how to set up your development environment (including installing Python and a code editor).  You'll also write and execute your first Python program (the classic 'Hello, World!').\",\n      \"Duration\": \"1 hour\"\n    },\n    {\n      \"ChapterName\": \"Chapter 2: Data Types, Variables, and Operators\",\n      \"About\": \"This chapter dives into fundamental Python data types: integers, floats, strings, and booleans. You'll learn how to declare variables, assign values, and perform basic arithmetic and logical operations. We will also cover the concepts of variables and constants in python\",\n      \"Duration\": \"1 hour\"\n    },\n    {\n      \"ChapterName\": \"Chapter 3: Control Flow: Conditionals and Loops\",\n      \"About\": \"This chapter covers the essential control flow statements that allow your programs to make decisions and repeat actions. You'll learn how to use `if`, `elif`, and `else` statements for conditional logic and `for` and `while` loops for iteration. We will also cover examples of loop control statements like break and continue\",\n      \"Duration\": \"1 hour\"\n    },\n    {\n      \"ChapterName\": \"Chapter 4: Functions: Organizing Your Code\",\n      \"About\": \"This chapter introduces the concept of functions, a key building block for modular and reusable code. You'll learn how to define your own functions, pass arguments, return values, and understand the scope of variables. We will also cover the basics of recursion\",\n      \"Duration\": \"1 hour\"\n    },\n    {\n      \"ChapterName\": \"Chapter 5: Lists and Strings: Working with Sequences\",\n      \"About\": \"This chapter explores two important sequence data types in Python: lists and strings. You'll learn how to create, access, modify, and manipulate lists and strings using various built-in methods and operators.  We'll also cover list comprehensions for concise data manipulation.  This will be a crucial foundation for more advanced data structures.\",\n      \"Duration\": \"1 hour\"\n    }\n  ]\n}\n```" },
            ],
        },
    ],
});


export const GenerateChapterContent_AI = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Explain the concept in Detail on Topic:ai,Chapter:Chapter 3: AI Applications and Case Studies in JSON Format with list of array with field as title, explanation on given chapter in detail, Code Example(Code field in <precode> format)if applicable\n\n"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"chapter\": \"Chapter 3: AI Applications and Case Studies\",\n  \"sections\": [\n    {\n      \"title\": \"Introduction to AI Applications and Case Studies\",\n      \"explanation\": \"This chapter delves into the practical applications of Artificial Intelligence (AI) across various industries.  It moves beyond theoretical concepts to demonstrate how AI is being implemented to solve real-world problems. The focus is on understanding the specific algorithms, techniques, and architectures employed in different applications, along with detailed case studies showcasing successful AI deployments and their impact. It also explores the challenges and ethical considerations associated with deploying AI in different contexts.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"AI in Healthcare: Diagnosis and Treatment\",\n      \"explanation\": \"AI is transforming healthcare by enabling faster and more accurate diagnoses, personalized treatment plans, and improved patient care.  Machine learning algorithms can analyze medical images (X-rays, MRIs) to detect diseases like cancer at an early stage. Natural Language Processing (NLP) can extract relevant information from patient records to assist doctors in making informed decisions. Predictive analytics can identify patients at high risk for certain conditions, allowing for proactive interventions. This section will explore specific case studies, such as AI-powered diagnostic tools, drug discovery platforms, and robotic surgery systems.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"Case Study: AI-Powered Diagnosis of Diabetic Retinopathy\",\n      \"explanation\": \"Diabetic retinopathy is a leading cause of blindness, often preventable with early detection.  AI algorithms, particularly Convolutional Neural Networks (CNNs), can be trained on vast datasets of retinal images to identify signs of the disease with high accuracy.  The system automates the screening process, enabling wider access to diagnosis, especially in underserved areas where specialists are scarce. The case study will analyze the performance metrics (accuracy, sensitivity, specificity), the challenges in data acquisition and labeling, and the impact of this technology on patient outcomes.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"AI in Finance: Fraud Detection and Algorithmic Trading\",\n      \"explanation\": \"The finance industry leverages AI for a variety of purposes, including fraud detection, algorithmic trading, risk management, and customer service. Machine learning algorithms can analyze transaction data in real-time to identify suspicious patterns indicative of fraudulent activity. Algorithmic trading systems use AI to execute trades based on complex market data, aiming to maximize profits and minimize risk. AI chatbots provide instant customer support, handling routine inquiries and resolving basic issues. This section will examine the specific algorithms used in these applications and the regulatory considerations involved.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"Case Study: AI-Based Fraud Detection in Credit Card Transactions\",\n      \"explanation\": \"Credit card fraud is a significant problem for financial institutions. AI-based fraud detection systems use machine learning models, often ensembles of algorithms like Random Forests and Gradient Boosting, to identify unusual spending patterns. These models are trained on historical transaction data, including features like transaction amount, location, time of day, and merchant category. The system assigns a risk score to each transaction, flagging those with high scores for further investigation. The case study will evaluate the effectiveness of different algorithms, the challenges of handling imbalanced datasets (where fraudulent transactions are rare), and the impact on fraud losses and customer experience.\",\n      \"code\": \"<precode>\\nimport pandas as pd\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.ensemble import RandomForestClassifier\\nfrom sklearn.metrics import accuracy_score, classification_report\\n\\n# Sample data (replace with your actual data)\\ndata = {\\n    'amount': [10, 100, 5, 500, 15, 200, 7, 1000],\\n    'merchant_category': ['food', 'electronics', 'food', 'travel', 'food', 'electronics', 'food', 'travel'],\\n    'is_fraud': [0, 0, 0, 1, 0, 0, 0, 1]\\n}\\ndf = pd.DataFrame(data)\\n\\n# Feature Engineering (Example: One-hot encode merchant category)\\ndf = pd.get_dummies(df, columns=['merchant_category'])\\n\\n# Prepare data for model training\\nX = df.drop('is_fraud', axis=1)\\ny = df['is_fraud']\\n\\n# Split data into training and testing sets\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\\n\\n# Train a Random Forest classifier\\nmodel = RandomForestClassifier(random_state=42)\\nmodel.fit(X_train, y_train)\\n\\n# Make predictions on the test set\\ny_pred = model.predict(X_test)\\n\\n# Evaluate the model\\naccuracy = accuracy_score(y_test, y_pred)\\nreport = classification_report(y_test, y_pred)\\n\\nprint(f'Accuracy: {accuracy}')\\nprint(f'Classification Report:\\\\n{report}')\\n</precode>\"\n    },\n    {\n      \"title\": \"AI in Manufacturing: Predictive Maintenance and Quality Control\",\n      \"explanation\": \"AI is revolutionizing manufacturing processes by enabling predictive maintenance, improved quality control, and optimized production schedules. Machine learning algorithms can analyze sensor data from equipment to predict potential failures, allowing for proactive maintenance and minimizing downtime. Computer vision systems can inspect products for defects with greater speed and accuracy than human inspectors. AI can also optimize production schedules based on real-time demand and resource availability. This section will explore specific case studies of AI-powered manufacturing solutions and their impact on efficiency and cost savings.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"Case Study: Predictive Maintenance in a Manufacturing Plant\",\n      \"explanation\": \"This case study focuses on implementing predictive maintenance in a manufacturing plant using sensor data from critical equipment.  Data such as temperature, vibration, pressure, and current is collected in real-time.  Machine learning models, such as Recurrent Neural Networks (RNNs) or Long Short-Term Memory (LSTM) networks, are trained on this data to predict when equipment is likely to fail.  When the model predicts an imminent failure, a maintenance alert is triggered, allowing engineers to address the issue before it leads to downtime.  The case study analyzes the reduction in unplanned downtime, the improvement in equipment lifespan, and the return on investment (ROI) of the predictive maintenance system.\",\n      \"code\": \"<precode>\\nimport numpy as np\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.preprocessing import MinMaxScaler\\nfrom tensorflow.keras.models import Sequential\\nfrom tensorflow.keras.layers import LSTM, Dense\\n\\n# Sample sensor data (replace with your actual data)\\nsensor_data = np.random.rand(100, 5)  # 100 time steps, 5 sensors\\nfailure_data = np.random.randint(0, 2, 100)  # 0: no failure, 1: failure\\n\\n# Preprocess data\\nscaler = MinMaxScaler()\\nsensor_data = scaler.fit_transform(sensor_data)\\n\\n# Prepare data for LSTM (time series format)\\nX = sensor_data[:-1]\\ny = failure_data[1:]\\n\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\\n\\nX_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))\\nX_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))\\n\\n# Build LSTM model\\nmodel = Sequential()\\nmodel.add(LSTM(50, activation='relu', input_shape=(1, 5)))\\nmodel.add(Dense(1, activation='sigmoid'))\\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\\n\\n# Train the model\\nmodel.fit(X_train, y_train, epochs=10, verbose=0)\\n\\n# Evaluate the model\\nloss, accuracy = model.evaluate(X_test, y_test, verbose=0)\\nprint(f'Accuracy: {accuracy}')\\n\\n#Example prediction (simulated alert system)\\nsample_data = sensor_data[-1].reshape(1,1,5)\\nprediction = model.predict(sample_data)[0][0]\\n\\nif prediction > 0.8:  # Threshold for triggering an alert\\n  print(\\\"Potential equipment failure detected! Triggering maintenance alert.\\\")\\n\\n</precode>\"\n    },\n    {\n      \"title\": \"AI in Retail: Recommendation Systems and Customer Segmentation\",\n      \"explanation\": \"AI is transforming the retail industry by enabling personalized customer experiences, optimized inventory management, and targeted marketing campaigns. Recommendation systems use machine learning algorithms to suggest products that customers are likely to purchase based on their past behavior and preferences. Customer segmentation techniques use AI to group customers into distinct segments based on their demographics, purchasing habits, and online activity.  AI chatbots provide instant customer support and personalized product recommendations. This section will examine the specific algorithms used in these applications and their impact on sales and customer satisfaction.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"Case Study: Product Recommendation System for an E-Commerce Website\",\n      \"explanation\": \"This case study focuses on developing a product recommendation system for an e-commerce website using collaborative filtering or content-based filtering techniques. Collaborative filtering recommends products based on the preferences of similar users, while content-based filtering recommends products based on the characteristics of products that the user has previously liked or purchased. The system analyzes user browsing history, purchase history, and product ratings to generate personalized recommendations. The case study evaluates the performance of different recommendation algorithms using metrics such as click-through rate (CTR), conversion rate, and average order value. It also discusses the challenges of addressing the cold start problem (when a new user or product has limited data) and maintaining the relevance of recommendations over time.\",\n      \"code\": \"<precode>\\nimport pandas as pd\\nfrom sklearn.metrics.pairwise import cosine_similarity\\n\\n# Sample data (replace with your actual data)\\ndata = {\\n    'user_id': [1, 1, 2, 2, 3, 3, 4, 4],\\n    'product_id': ['A', 'B', 'A', 'C', 'B', 'C', 'A', 'D'],\\n    'rating': [5, 4, 3, 5, 2, 4, 5, 1]\\n}\\ndf = pd.DataFrame(data)\\n\\n# Create a user-item matrix\\nuser_item_matrix = df.pivot_table(index='user_id', columns='product_id', values='rating').fillna(0)\\n\\n# Calculate cosine similarity between users\\nuser_similarity = cosine_similarity(user_item_matrix)\\nuser_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)\\n\\n# Function to get product recommendations for a user\\ndef get_recommendations(user_id, user_similarity_df, user_item_matrix, num_recommendations=2):\\n    # Find similar users\\n    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:]  # Exclude the user themselves\\n\\n    # Products rated by similar users that the target user hasn't rated\\n    recommended_products = {}\\n    for user, similarity in similar_users.items():\\n        products = user_item_matrix.loc[user]\\n        for product, rating in products.items():\\n            if user_item_matrix.loc[user_id, product] == 0 and rating > 0:  # User hasn't rated and product is rated positively\\n                if product not in recommended_products:\\n                    recommended_products[product] = 0\\n                recommended_products[product] += rating * similarity\\n\\n    # Sort products by recommendation score\\n    sorted_products = sorted(recommended_products.items(), key=lambda x: x[1], reverse=True)\\n\\n    return sorted_products[:num_recommendations]\\n\\n\\n# Get recommendations for user 1\\nrecommendations = get_recommendations(1, user_similarity_df, user_item_matrix)\\nprint(f'Recommendations for user 1: {recommendations}')\\n</precode>\"\n    },\n    {\n      \"title\": \"Ethical Considerations and Challenges in AI Applications\",\n      \"explanation\": \"This section addresses the ethical considerations and challenges associated with the deployment of AI.  It discusses issues such as bias in AI algorithms, data privacy, accountability, and the potential impact of AI on employment. It also explores the importance of developing AI systems that are fair, transparent, and explainable. The section highlights the need for ethical guidelines and regulations to ensure that AI is used responsibly and for the benefit of society.\",\n      \"code\": null\n    },\n    {\n      \"title\": \"Conclusion\",\n      \"explanation\": \"This chapter concludes by summarizing the key applications of AI discussed and emphasizing the transformative potential of AI across various industries. It also reiterates the importance of considering the ethical implications and challenges associated with AI deployment. Finally, it offers a forward-looking perspective on the future of AI and its potential to further revolutionize our world.\",\n      \"code\": null\n    }\n  ]\n}\n```"},
        ],
      },
    ],
  });

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
